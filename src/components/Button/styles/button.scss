@import './button-variables';

.button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    border: none;
    border-radius: 1rem;
    font-family: inherit;
    font-weight: 500;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.15s ease;
    position: relative;
    user-select: none;
    white-space: nowrap;
    vertical-align: middle;

    // Flat appearance with subtle depth
    box-shadow:
        0 1px 2px rgba(0, 0, 0, 0.05),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);

    &:focus-visible {
        outline: 2px solid var(--focus-color);
        outline-offset: 2px;
    }

    // Base sizes
    &--sm {
        padding: 0.5rem 0.75rem;
        font-size: 0.875rem;
        min-height: 2rem;

        .button__icon {
            width: 1rem;
            height: 1rem;
        }
    }

    &--md {
        padding: 0.625rem 1rem;
        font-size: 1rem;
        min-height: 2.5rem;

        .button__icon {
            width: 1.25rem;
            height: 1.25rem;
        }
    }

    &--lg {
        padding: 0.75rem 1.25rem;
        font-size: 1.125rem;
        min-height: 3rem;

        .button__icon {
            width: 1.5rem;
            height: 1.5rem;
        }
    }

    // Icon-only adjustments
    &--icon-only {
        &.button--sm {
            padding: 0.5rem;
            width: 2rem;
        }

        &.button--md {
            padding: 0.625rem;
            width: 2.5rem;
        }

        &.button--lg {
            padding: 0.75rem;
            width: 3rem;
        }
    }

    // Primary button styles
    &--primary {
        @each $name, $palette in $palettes {
            &.button--#{$name} {
                background: map-get($palette, 'main');
                color: map-get($palette, 'contrast');
                border: solid map-get($palette, 'dark');
                border-width: 2px;
                --focus-color: #{map-get($palette, 'main')};
                box-shadow: 0 $button-bottom-length 0 0 map-get($palette, 'dark'),;

                // Idle state - subtle raised effect
                // box-shadow:
                //     0 2px 4px rgba(map-get($palette, 'main'), 0.2),
                //     inset 0 1px 0 rgba(255, 255, 255, 0.15);

                // Hover state - more pronounced elevation
                &:hover:not(:disabled) {
                    background: map-get($palette, 'highlight');
                    border-color: map-get($palette, 'dark');
                    box-shadow: 0 calc($button-bottom-length + 2px) 0 0 map-get($palette, 'dark');
                    transform: translateY(-2px);
                    // box-shadow: none;
                    // transform: translateY(calc($button-bottom-length - 1px));
                }

                // Active/Clicked state - pressed into socket
                &:active:not(:disabled) {
                    background: map-get($palette, 'highlight');
                    border-color: map-get($palette, 'dark');
                    box-shadow: none;
                    transform: translateY(calc($button-bottom-length - 1px));
                }

                // Disabled state
                &:disabled {
                    background: map-get($palette, 'highlight');
                    border-color: map-get($palette, 'dark');
                    cursor: not-allowed;
                    transform: translateY(calc($button-bottom-length - 1px));
                    box-shadow: none;
                    opacity: 0.5;
                }
            }
        }
    }

    // Secondary button styles
    &--secondary {
        @each $name, $palette in $palettes {
            &.button--#{$name} {
                background: transparent;
                color: map-get($palette, 'main');
                border: 2px solid map-get($palette, 'main');
                --focus-color: #{map-get($palette, 'main')};

                // Idle state
                box-shadow:
                    0 1px 3px rgba(map-get($palette, 'main'), 0.1),
                    inset 0 1px 0 rgba(255, 255, 255, 0.1);

                // Hover state
                &:hover:not(:disabled) {
                    background: rgba(map-get($palette, 'main'), 0.1);
                    border-color: map-get($palette, 'dark');
                    color: map-get($palette, 'dark');
                    transform: translateY(-1px);
                    box-shadow:
                        0 3px 6px rgba(map-get($palette, 'main'), 0.15),
                        inset 0 1px 0 rgba(255, 255, 255, 0.15);
                }

                // Active state
                &:active:not(:disabled) {
                    background: rgba(map-get($palette, 'main'), 0.2);
                    border-color: map-get($palette, 'darker');
                    color: map-get($palette, 'darker');
                    transform: translateY(0);
                    box-shadow:
                        0 1px 2px rgba(map-get($palette, 'main'), 0.2),
                        inset 0 2px 4px rgba(map-get($palette, 'main'), 0.1);
                }

                // Disabled state
                &:disabled {
                    background: transparent;
                    color: #6c757d;
                    border-color: #dee2e6;
                    cursor: not-allowed;
                    transform: none;
                    box-shadow: none;
                    opacity: 0.6;
                }
            }
        }
    }

    // Tertiary button styles
    &--tertiary {
        @each $name, $palette in $palettes {
            &.button--#{$name} {
                background: transparent;
                color: map-get($palette, 'main');
                border: 1px solid transparent;
                --focus-color: #{map-get($palette, 'main')};

                // Idle state
                box-shadow: none;

                // Hover state
                &:hover:not(:disabled) {
                    background: rgba(map-get($palette, 'main'), 0.1);
                    color: map-get($palette, 'dark');
                    transform: translateY(-1px);
                    box-shadow: 0 2px 4px rgba(map-get($palette, 'main'), 0.1);
                }

                // Active state
                &:active:not(:disabled) {
                    background: rgba(map-get($palette, 'main'), 0.15);
                    color: map-get($palette, 'darker');
                    transform: translateY(0);
                    box-shadow: inset 0 2px 4px rgba(map-get($palette, 'main'), 0.1);
                }

                // Disabled state
                &:disabled {
                    background: transparent;
                    color: #6c757d;
                    cursor: not-allowed;
                    transform: none;
                    box-shadow: none;
                    opacity: 0.6;
                }
            }
        }
    }

    // Content alignment
    &__content {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    &__icon {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
    }

    &__text {
        flex: 1;
        text-align: center;
    }
}

// Loading state
.button--loading {
    position: relative;
    pointer-events: none;

    .button__content {
        opacity: 0.6;
    }

    &::after {
        content: '';
        position: absolute;
        width: 1rem;
        height: 1rem;
        border: 2px solid currentColor;
        border-top-color: transparent;
        border-radius: 50%;
        animation: button-spin 0.8s linear infinite;
    }
}

@keyframes button-spin {
    to {
        transform: rotate(360deg);
    }
}